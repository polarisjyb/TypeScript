"use strict";
function add(a, b) {
    console.log(a + b);
}
/*
  ? voide 키워드는 프로그래밍 언어에서 상당히 중요한 시사점을 가지고 있는 키워드 입니다.
  * 사전적 의미로 void는 "무효"를 뜻하는데
  * 자바스크립트에서도 void 키워드를 과감히 삭제하고, undefined 이라는 데이터 타입을 도입하는 형태입니다.
  * 표준적인 언어인 C  계열 언어, 컴파일언어에서 void는 상당히 자주 사용하는 키워드인데,
  * 자바스크립트와 같은 스크립트(대본) 형언어가 기본 골격이었던 제작시점 에서는 매번 작성하기 귀찮았던 모양입니다.
  * C 언어로 void는 return 0을 이야기 하고, 0 은 곧 false 입니다.
  * 모던(최신의) C 언어는 불리언타입(보통 불, 부울 이라고 합니다.)을 지원하지만,
  * 태초 격의 C언어에서는 불리언 타입 자체가 없었습니다. 0이 곧 false, 1이 곧 true 입니다.
  * 태생이 하드웨어를 다루기 위한 C언어와 동작을 위해 만들어진 자바스크립트의 목적이 결정적으로 대목입니다.
  * 리턴이 없으면 엉뚱한 데이터타입인 undefined를 '리턴' 한다 라는 것이 개발자들의 불만이었습니다.
  * 리턴이 "없다" 와 리턴으로 "정의되지 않았다"를 반환하는 것은 모호하기 때문입니다.
  * "리턴이 없을 때 이렇게 해줘" 라는 명령이 아닌 "리턴이 특수한 데이터 타입일 때 이렇게 해줘"로 어감(명령)이 바뀌는 것이 문제였고,
  * 이것을 해결하기 위해 "명시적인 리턴 유무"를 뜻하는 void 키워드가 타입스크립트에서 다시 활용됩니다.
  * 위 add() 라는 함수는 "실행은 하지만 리턴은 없다" 라는 것을 명시적으로 void 구문으로 바로 확인 할 수 있습니다.
  * undefined라는 리턴이 있는지 여부를 매번 찾을 필요가 없기 때문입니다.
  * 명시성 면에서 상당히 요긴하며, 관점을 확장해 자바스크립트만 유독 void를 사용하지 않습니다.
*/
function addTwo(a, b) {
    return a + b;
}
// ? addTwo의 리턴은 number 타입입니다.
